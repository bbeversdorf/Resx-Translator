# This is a basic workflow to help you get started with Actions
name: Release
on:
  push:
    tags:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get the version
        id: get_tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Run build script
        run: |
          echo Building Release
          nuget restore
          msbuild /t:ResxTranslator /property:Configuration=Release
          rm -rf Release
          mkdir -p Release/lib
          mkdir -p Release/bin
          mv ResxTranslator/bin/Release Release/lib/ResxTranslator
          echo "#!/bin/sh
          SCRIPT_DIR=\$( cd -- \"\$( dirname -- \"\${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )
          exec mono \$SCRIPT_DIR/../lib/ResxTranslator/ResxTranslator.exe \"\$@\"" >> Release/bin/resx_translator
          chmod +x Release/bin/resx_translator
          zip -r ${{ steps.get_tag.outputs.tag }}.zip Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.get_tag.outputs.tag }}.zip
          asset_name: ${{ steps.get_tag.outputs.tag }}.zip
          asset_content_type: application/zip
